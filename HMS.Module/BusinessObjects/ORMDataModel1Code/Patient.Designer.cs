//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
namespace XafDataModel.Module.BusinessObjects.test2
{

    public partial class Patient : DevExpress.Persistent.BaseImpl.Person
    {
        int fID;
        public int ID
        {
            get { return fID; }
            set { SetPropertyValue<int>(nameof(ID), ref fID, value); }
        }
        string fMedicalID;
        [Persistent(@"Name")]
        [DevExpress.Persistent.Validation.RuleRequiredField]
        public string MedicalID
        {
            get { return fMedicalID; }
            set { SetPropertyValue<string>(nameof(MedicalID), ref fMedicalID, value); }
        }
        string fnationalID;
        [Indexed(Name = @"Index1", Unique = true)]
        public string nationalID
        {
            get { return fnationalID; }
            set { SetPropertyValue<string>(nameof(nationalID), ref fnationalID, value); }
        }
        bool fInStay;
        [ColumnDefaultValue(false)]
        [DevExpress.Persistent.Base.VisibleInDetailView(false)]
        public bool InStay
        {
            get { return fInStay; }
            set { SetPropertyValue<bool>(nameof(InStay), ref fInStay, value); }
        }
        bool fHasAppointment;
        [ColumnDefaultValue(false)]
        [DevExpress.Persistent.Base.VisibleInDetailView(false)]
        public bool HasAppointment
        {
            get { return fHasAppointment; }
            set { SetPropertyValue<bool>(nameof(HasAppointment), ref fHasAppointment, value); }
        }
        [PersistentAlias("Iif([totalPayment] - [totalExchanges] Is Null, 0.0m, [totalPayment] - [totalExchanges])")]
        public decimal creditor
        {
            get { return (decimal)(EvaluateAlias(nameof(creditor))); }
        }
        [PersistentAlias("Iif([Stays][].Sum([stayTotalSum]) Is Null, 0.0m, [Stays][].Sum([stayTotalSum])) + Iif([Emergencies][].Sum([TotalSum]) Is Null, 0.0m, [Emergencies][].Sum([TotalSum])) + Iif([Appointments][].Sum([amount]) Is Null, 0.0m, [Appointments][].Sum([amount]))")]
        public decimal debtor
        {
            get { return (decimal)(EvaluateAlias(nameof(debtor))); }
        }
        [System.ComponentModel.Browsable(false)]
        [PersistentAlias("Iif([Payments][].Sum([amount]) Is Null, 0.0m, [Payments][].Sum([amount]))")]
        public decimal totalPayment
        {
            get { return (decimal)(EvaluateAlias(nameof(totalPayment))); }
        }
        [System.ComponentModel.Browsable(false)]
        [PersistentAlias("Iif([FinancialExchanges][].Sum([amount]) Is Null, 0.0m, [FinancialExchanges][].Sum([amount]))")]
        public decimal totalExchanges
        {
            get { return (decimal)(EvaluateAlias(nameof(totalExchanges))); }
        }
        Account faccount;
        public Account account
        {
            get { return faccount; }
            set { SetPropertyValue<Account>(nameof(account), ref faccount, value); }
        }
        bool fInEmergency;
        public bool InEmergency
        {
            get { return fInEmergency; }
            set { SetPropertyValue<bool>(nameof(InEmergency), ref fInEmergency, value); }
        }
        [Association(@"StayReferencesPatient")]
        public XPCollection<Admission> Stays { get { return GetCollection<Admission>(nameof(Stays)); } }
        [Association(@"AppointmentReferencesPatient")]
        public XPCollection<Appointment> Appointments { get { return GetCollection<Appointment>(nameof(Appointments)); } }
        [Association(@"PaymentReferencesPatient")]
        public XPCollection<Payments> Payments { get { return GetCollection<Payments>(nameof(Payments)); } }
        [Association(@"FinancialExchangeReferencesPatient")]
        public XPCollection<FinancialExchange> FinancialExchanges { get { return GetCollection<FinancialExchange>(nameof(FinancialExchanges)); } }
        [Association(@"EmergencyReferencesPatient")]
        public XPCollection<Emergency> Emergencies { get { return GetCollection<Emergency>(nameof(Emergencies)); } }
        [Association(@"TestReferencesPatient"), Aggregated]
        public XPCollection<Test> Tests { get { return GetCollection<Test>(nameof(Tests)); } }
        [Association(@"EndscopeReferencesPatient"), Aggregated]
        public XPCollection<Endscope> Endscopes { get { return GetCollection<Endscope>(nameof(Endscopes)); } }
        [Association(@"XraysReferencesPatient"), Aggregated]
        public XPCollection<Xrays> XraysCollection { get { return GetCollection<Xrays>(nameof(XraysCollection)); } }
    }

}
